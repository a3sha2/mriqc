#! /bin/bash
#
#
# @Authorship: Jennifer Reiter
# Flywheel 2017
#
#

################################################################################
# DEFINE VARIABLES

FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json
INPUT_DIR=$FLYWHEEL_BASE/input/nifti
ROOTOUT_DIR=$FLYWHEEL_BASE/output
OUTPUT_DIR=$ROOTOUT_DIR/out
WORKING_DIR=$ROOTOUT_DIR/work
CONTAINER='[flywheel/mriqc]'

################################################################################
# CONFIGURE ENV

source ${FLYWHEEL_BASE}/docker-env.sh
source /etc/fsl/fsl.sh

##############################################################################
# Parse configuration

if [[ -f $CONFIG_FILE ]]; then
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value)"' $CONFIG_FILE)
else
  CONFIG_FILE=$FLYWHEEL_BASE/manifest.json
  eval $(jq -r '.config | to_entries[] | "config_\(.key)=\(.value.default)"' $CONFIG_FILE)
fi

################################################################################
# VALIDATE INPUT DATA

# Check if the input directory is not empty
if [[ "$(ls -A $INPUT_DIR)" ]] ; then
    echo "$CONTAINER  Starting..."
else
    echo "Input directory is empty: $INPUT_DIR"
    exit 17
fi

# Find input file in input directory with the extension .nii, .nii.gz
input_file=`find $INPUT_DIR -iname '*.nii' -o -iname '*.nii.gz'`
bni=`basename "$input_file"`
filename="${bni%%.nii*}"
inextension="${bni#$filename.}"

# If input file not found, raise error
if [[ ! -e $input_file ]]; then
    echo "No Nifti files (.nii or .nii.gz) were found within input directory $INPUT_DIR"
    exit 17
fi


################################################################################
## CHECK FOR BIDS COMPLIANCE

bids_func_re="sub-[0-9a-zA-Z]+(_ses-[0-9a-zA-Z]+)?_task-[0-9a-zA-Z]+(_acq-[0-9a-zA-Z]+)?(_rec-[0-9a-zA-Z]+)?(_run-[0-9]+)?(_echo-[0-9]+)?_bold"
bids_anat_re="sub-[0-9a-zA-Z]+(_ses-[0-9a-zA-Z]+)?(_acq-[0-9a-zA-Z]+)?(_ce-[0-9a-zA-Z]+)?(_rec-[0-9a-zA-Z]+)?(_run-[0-9]+)?(_mod-[0-9a-zA-Z]+)?_[T1w|T2w]"

if [[ $filename =~ $bids_func_re ]]; then
    bids_compliant=true
    config_measurement="functional"
    echo "Input filename is in BIDS format for a $config_measurement image"

elif [[ $filename =~ $bids_anat_re ]]; then
    bids_compliant=true
    # measurement is either anatomy_t1w or antomy_t2w
    # get end of file, if it's T1w or T2w
    # Transform T1w/T2w -> anatomy_t1w/anatomy_t2w
    desc="${filename:(-3)}"
    if [[ $desc = 'T1w' ]]; then
        config_measurement='anatomy_t1w'
    fi
    if [[ $desc = 'T2w' ]]; then
        config_measurement='anatomy_t2w'
    fi
    echo "Input filename is in BIDS format for an $config_measurement image"

else
    # Not BIDS compliant -- need to determine measurement (functional, anatomy_t1w, or anatomy_t2w) from config file
    bids_compliant=false
    echo "Input filename is not in BIDS format. Detecting measurement..."
    # Using measurment read from config or manifest
    #   Make measurement all lowercase
    config_measurement=`echo ${config_measurement} | tr '[:upper:]' '[:lower:]'`

    ## Determine measurement
    # Check if autodetect, otherwise use what was read in from config.json/manifest.json
    if [[ $config_measurement = 'auto-detect' ]]; then
        auto_detect=true
        echo "Auto-detecting input file measurement"
        # Get measurement from context
        config_measurement=`cat $CONFIG_FILE | jq -r '.inputs.nifti.object.measurements[0]'`
    else
        auto_detect=false
        # Not auto-detecting measurement - measurement what was given by user
        echo "File measurement indicated by user"
    fi

    ## Determine if measurement is valid
    # Make measurement all lowercase
    config_measurement=`echo ${config_measurement} | tr '[:upper:]' '[:lower:]'`
    # Make array of allowable options
    measurementArray=(functional anatomy_t1w anatomy_t2w)
    found=false
    for item in "${measurementArray[@]}"; do
        if [[ $config_measurement == $item ]]; then
            found=true
        fi
    done

    # If found, print out measurement
    if $found; then
        echo "File measurement is $config_measurement"
    # Otherwise, print info and raise an error
    else
        # Print info
        echo "File measurement is $config_measurement"
        echo "Measurement needs to be 'anatomy_t1w', 'anatomy_t2w', or 'functional'"

        if $auto_detect; then
            # If auto-detected -- then input is wrong (exit code 17)
            echo "MRIQC algorithm will not run - nothing to do - exit(17)"
            exit 17
        else
            # If user indicated --- then option is wrong (exit code 18)
            echo "MRIQC algorithm will not run - file measurement is not correct - exit(18)"
            exit 18
        fi
    fi
fi

################################################################################
# DEFINE BIDS LABELS

# Define BIDS subdirectory based on measurement type
if [[ "$config_measurement" = 'anatomy_t1w' ]]; then
    subdirname='anat'
elif [[ "$config_measurement" = 'anatomy_t2w' ]]; then
    subdirname='anat'
else
    subdirname='func'
fi

if [[ $bids_compliant = 'true' ]]; then
    # Since BIDS compliant -- extract the participant label number and description of the file
    #   participant label to be used in naming scheme as well as being passed to algorithm as a command line argument
    tmp="${filename#sub-*}"
    PARTICIPANT_LABEL="${tmp%%_*}"
    # Get the file description for BIDS format (functional: task-<task_label>[_acq-<label>_rec-<label>_run<index>]_bold)
    filedesc="${tmp#$PARTICIPANT_LABEL}"
else
    # Since NOT BIDS compliant-- extract all letters and numbers from input filename to be used as participant label
    PARTICIPANT_LABEL="${filename//[!0-9a-zA-Z]}"
    # Determine the file description at the end of the filename
    if [[ $config_measurement = "functional" ]]; then
        # Make the file description the most basic form in BIDS format for functional images
        filedesc='_task-_bold'
    else
        # The file description is T1w if measurement is 'anatomy_t1w'
        if [[ $config_measurement == "anatomy_t1w" ]]; then
            filedesc='_T1w'
        fi
        # The file description is T2w if measurement is 'anatomy_t2w'
        if [[ $config_measurement == "anatomy_t2w" ]]; then
            filedesc='_T2w'
        fi
    fi
fi


################################################################################
# CREATE A BIDS FORMATTED DIRECTORY

# Define top level dir
BIDS_DIR=$WORKING_DIR/sub-$PARTICIPANT_LABEL

# Define subdir and bids_file
BIDS_SUBDIR=$BIDS_DIR/$subdirname
bids_file=sub-$PARTICIPANT_LABEL$filedesc.$inextension
mkdir -p $BIDS_SUBDIR

# Change filename to be in BIDS format (may already be in BIDS format)
cp "$input_file" $BIDS_SUBDIR/$bids_file


################################################################################
# RUN MRIQC

if [[ $config_verbose_reports == "true" ]]; then
    VERBOSE_REPORTS='--verbose-reports'
else
    VERBOSE_REPORTS=''
fi

/usr/local/miniconda/bin/mriqc --version
time /usr/local/miniconda/bin/mriqc --no-sub $VERBOSE_REPORTS $BIDS_DIR $OUTPUT_DIR participant -w $WORKING_DIR --participant_label $PARTICIPANT_LABEL
MRIQC_EXITSTATUS=$?

################################################################################
# CLEANUP OUTPUTS & GENERATE METADATA

# Define the expected output report filename generated by mriqc - NOTE: strange case with Functional file desc
if [[ $filedesc == "_task-_bold" ]]; then
    outfilename=sub-$PARTICIPANT_LABEL'_bold.html'
    outderivative=sub-$PARTICIPANT_LABEL'_bold.json'
    else
    outfilename=sub-$PARTICIPANT_LABEL$filedesc'.html'
    outderivative=sub-$PARTICIPANT_LABEL$filedesc'.json'
fi

# Check if MRIQC succeeded
if [[ $MRIQC_EXITSTATUS == 0 ]]; then
  # Define report, zip and derivative filename
  report_filename="$filename"_mriqc.qa.html
  zip_filename="$filename"_mriqc_output.zip
  deriv_filename="$filename"_mriqc.json

  # Read in values within derivatives JSON
  deriv_info=`jq '.' "$OUTPUT_DIR/derivatives/$outderivative"`
  metadatajson_string="{ \"acquisition\" : { \"files\" : [{ \"name\" : \""$report_filename"\",\"type\": \"qa\",\"measurements\": [\""$config_measurement"\"],\"info\" : $deriv_info}"

  # Check if save outputs config present, if so zip up all outputs
  if [ $config_save_outputs == 'true' ]; then
    # Generate zipped output of mriqc
    cd "$ROOTOUT_DIR"
    zip -r "$ROOTOUT_DIR"/"$zip_filename" *
    # Add to the metadatajson string for zip_filename
    metadatajson_string=$metadatajson_string",{ \"name\" : \""$zip_filename"\", \"type\": \"qa\",\"measurements\": [\""$config_measurement"\"]}"
  fi

  # Check if save derivatives config present, if so, copy file to root level directory
  if [ $config_save_derivatives == 'true' ]; then
    # Move derivative JSON to the output directory and rename to match the original input filename
    cp "$OUTPUT_DIR"/derivatives/"$outderivative" "$ROOTOUT_DIR"/"$deriv_filename"
    # Add to the metadatajson string for deriv_filename
    metadatajson_string=$metadatajson_string",{ \"name\" : \""$deriv_filename"\", \"type\": \"qa\",\"measurements\": [\""$config_measurement"\"]}"
  fi

  # Add the closing brackets to metadata string
  metadatajson_string=$metadatajson_string"]}}"
  # Move html report to the output directory and rename to match the original input filename
  cp "$OUTPUT_DIR"/reports/"$outfilename" "$ROOTOUT_DIR"/"$report_filename"
  # Write out metadatajson_string to file
  echo -e $metadatajson_string > $ROOTOUT_DIR/.metadata.json
fi

# Cleanup
rm -r $WORKING_DIR
rm -r $OUTPUT_DIR

# Get a list of the files in the output directory
outputs=`find $ROOTOUT_DIR -type f -name "*"`
# If outputs exist, then go on...
if [[ -z $outputs ]]
  then
    echo "No results found in output directory... Exiting"
    exit 1
  else
    chmod -R 777 $ROOTOUT_DIR
    echo -e "Wrote: `ls $ROOTOUT_DIR`"
fi

exit $MRIQC_EXITSTATUS
